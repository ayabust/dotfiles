#!/usr/bin/env bash

git diff --staged --minimal >/dev/shm/git_commit_msg

echo "----------------------------------------------------
You will strictly follow the following conventions to write the content of the commit message:

You are to act as the author of a commit message in git.
Your mission is to create clean and comprehensive commit messages in the given @commitlint convention and explain WHAT were the changes and WHY the changes were done. I'll send you an output of 'git diff --staged' command, and you convert it into a commit message.
Add a short description of WHY the changes are done after the commit message. Don't start it with "This commit", just describe the changes.
Do not rewrite the code Do not explain.
Please keep the subject <= 100 characters.

The conventions refers to the following structure of commit message:
Type The type of commit message. It can be one of the following:
- build: Changes that affect the build system or external dependencies (examples of scopes: gulp, composer, npm).
- ci: Changes to our configuration files and CI scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs).
- docs: Only documentation changes.
- feat: A new feature.
- fix: Bug fix.
- perf: A code modification that improves performance.
- refactor: A code modification that neither fixes a bug nor adds functionality.
- style: Changes that do not affect the meaning of the code (white spaces, formatting, missing semicolons, etc.).
- test: Addition of missing tests or correction of existing tests.
- revert: Revert a previous commit.
- wip: Work in progress.

Format: <type>: <subject>\n<description>" >>/dev/shm/git_commit_msg

cat /dev/shm/git_commit_msg >/dev/shm/git_commit_msg_repos
# cat /dev/shm/git_commit_msg | ollama run llama3.2 >>../.git/COMMIT_EDITMSG && echo "IA ok" &

# Ajouter # au d√©but de chaque ligne
sed -i 's/^/# /g' /dev/shm/git_commit_msg_repos

git commit --edit --template /dev/shm/git_commit_msg_repos
